/*
Author:	My Tran
Filename:	CYK.h
Description:	CYK class uses CYK algorithm to determine if a string can be generated by a CFG.
*/
#pragma once
#include "Token.h"
#include "Lexer.h"
#include <vector>

class CYK
{
private:
	//Private Data members
	std::string input;		//String containing input value
	std::string grammar;	//Rules of the grammar being analyzed
	std::string startRule;			//Starting rule of the grammar

	std::vector < std::vector<std::unordered_map<std::string, Token>>> triangleTable;			//Triangle for determining if string can generated
	std::unordered_map<std::string, std::unordered_map<std::string, Token>> grammarMap;	//Maps production symbol to RHS of rule

	//Private methods
	/*
	Purpose:	Fill the triangle table matrix using CYK algo
	Pre:		grammar not empty.
	Post:		triangleTable is filled
	*/
	void FillMatrix();

	/*
	Purpose:	Run CYK algorithm on currently stored string with currently stored grammar
	Pre:		
	Post:
	*/
	void Run();

	/*
	Purpose:	Initialize the size of the triangle table.
	Pre:		input not empty
	Post:		triangleTable is the necessary size for CYK
	*/
	void InitMatrix();

	/*
	Purpose:	Performs parse on grammar, gets rule map, and start.
	Pre:		grammar is not empty.
	Post:		grammarMap and startRule are set.
	*/
	void ParseGrammar();

	/*
	Purpose:	Inserts production rules into the indicated square of the triangle table following CYK algorithm.
	Pre:		Takes two arguments - int column index and int row index
	Post:		Square[row][column] is filled in in the triangleTable.
	*/
	void CalculateSquare(int, int);

public:
	// Default constructor
	CYK();

	//Non-default constructor
	/*
	Purpose:	Creates a new object with given values.
	Pre:		Takes 2 arguments - input string; grammar string
	Post:		CYK object is instantiated and input and grammar are set to arguments
	*/
	CYK(std::string, std::string);

	//Destructor
	~CYK();

	/*
	Purpose:	Determines if an input string can be accepted and
				generated by a language.
	Pre:		CYK has been performed.
	Post:		Returns true if string is accepted. False otherwise.
	*/
	bool IsAccepted();

	/*
	Purpose:	Sets the input string that is to be run in the algorithm
	Pre:		Takes on argument representing the input string
	Post:		Sets input to be the given string
	*/
	void SetInput(std::string);

	/*
	Purpose:	Setter for the CFG used in parsing and CYK.
	Pre:		Take one string argument, representing the new grammar. CFG
				or functionality is not guaranteed
	Post:		
	*/
	void SetGrammar(std::string);

	/*
	Purpose:	Print the triangleTable's contents, row by row and column by column.
	Pre:		None.
	Post:		Prints table to console.
	*/
	void PrintTable();


	std::string ToString();
};
